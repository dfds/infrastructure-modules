name: $(Build.BuildId)

# Triggers
trigger:
  - master

pr:
  autoCancel: true
  drafts: false
  branches:
    include:
      - "*"
  paths:
    exclude:
      - ".github/workflows/*"
      - ".trunk/*"
      - .gitignore
      - .pre-commit-config.yaml
      - .tflint.hcl
      - LICENSE
      - README.md
      - renovate.json

# Define resources for container to use.
resources:
  containers:
    - container: prime
      image: dfdsdk/prime-pipeline:2.2.0
      env:
        AWS_DEFAULT_REGION: eu-west-1
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
        TF_VAR_fluxcd_bootstrap_repo_owner_token: $(TF_VAR_fluxcd_bootstrap_repo_owner_token)
        TF_VAR_atlantis_github_token: $(TF_VAR_atlantis_github_token)
        TF_VAR_grafana_agent_api_token: $(TF_VAR_grafana_agent_api_token)
        TF_VAR_grafana_agent_prometheus_url: $(TF_VAR_grafana_agent_prometheus_url)
        TF_VAR_grafana_agent_prometheus_username: $(TF_VAR_grafana_agent_prometheus_username)
        TF_VAR_grafana_agent_loki_url: $(TF_VAR_grafana_agent_loki_url)
        TF_VAR_grafana_agent_loki_username: $(TF_VAR_grafana_agent_loki_username)
        TF_VAR_grafana_agent_tempo_url: $(TF_VAR_grafana_agent_tempo_url)
        TF_VAR_grafana_agent_tempo_username: $(TF_VAR_grafana_agent_tempo_username)
        TF_VAR_onepassword_credentials_json: $(TF_VAR_onepassword_credentials_json)
        TF_VAR_onepassword_token_for_atlantis: $(TF_VAR_onepassword_token_for_atlantis)
        TF_VAR_docker_hub_username: $(TF_VAR_docker_hub_username)
        TF_VAR_docker_hub_password: $(TF_VAR_docker_hub_password)
        TF_VAR_eks_addon_awsebscsidriver_kms_arn: $(TF_VAR_eks_addon_awsebscsidriver_kms_arn)
        TF_VAR_velero_ebs_csi_kms_arn: $(TF_VAR_eks_addon_awsebscsidriver_kms_arn)
        TF_IN_AUTOMATION: "true"
        TG_TF_PATH: /usr/local/bin/tofu
    - container: aws-nuke
      image: dfdsdk/aws-nuke:0.0.26
      env:
        AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
        ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
    - container: go-build
      image: golang:1.24.5-bullseye
  repositories:
    - repository: Origin
      type: github
      endpoint: "dfds (2)"
      name: dfds/infrastructure-modules
      ref: master
    - repository: Nuke
      type: github
      endpoint: "dfds (2)"
      name: dfds/qa-nuke-config
      ref: main

# Define variable group to use
variables:
  - group: "Infrastructure-Modules QA"

lockBehavior: sequential
pool:
  vmImage: "ubuntu-latest"
stages:
  - stage: nuke
    displayName: "Nuke QA Account"
    condition: eq(variables['NUKE_QA'], 'true')
    jobs:
      - deployment: destroy
        displayName: Destroy resources
        cancelTimeoutInMinutes: 5
        container: prime
        environment: QA
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: origin
                  fetchDepth: 1
                  fetchTags: false
                - bash: ./src/qa-test-eks.sh destroy-velero-bucket eu-west-1 _global/s3-bucket-velero
                  displayName: "Terraform destroy Velero S3 bucket"
                  condition: succeededOrFailed()
                  timeoutInMinutes: 30
                - bash: ./src/qa-test-eks.sh destroy-cluster eu-west-1 qa
                  displayName: "Terraform destroy cluster & services"
                  condition: succeededOrFailed()
                  timeoutInMinutes: 60
                - bash: ./src/qa-test-eks.sh destroy-public-bucket eu-west-1 _global/eks-public-s3-bucket
                  displayName: "Terraform destroy shared resources"
                  condition: succeededOrFailed()
                  timeoutInMinutes: 30

      - deployment: nuke_account
        displayName: Nuke QA's AWS account
        cancelTimeoutInMinutes: 5
        container: aws-nuke
        dependsOn: destroy
        condition: succeededOrFailed()
        environment: QA
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: Nuke
                  fetchDepth: 1
                  fetchTags: false
                - bash: /usr/local/bin/aws-nuke -c ./nuke-config.yaml --force --force-sleep 5 --no-dry-run
                  displayName: "Nuke resources in QA account"
                  timeoutInMinutes: 60

  - stage: test
    displayName: "Testing"
    dependsOn: nuke
    condition: or(succeededOrFailed('nuke'), ne(variables['NUKE_QA'], 'true'))
    jobs:
      - job: build_test_master
        displayName: Build test binary from master branch
        container: go-build
        cancelTimeoutInMinutes: 0
        variables:
          GO_CACHE_DIR: $(Pipeline.Workspace)/.cache/go-build/
        steps:
          - checkout: Origin
            fetchDepth: 1
            fetchTags: false
          - task: Cache@2.198.0
            inputs:
              key: '"go" | "$(Agent.OS)" | $(Build.Repository.LocalPath)/test/integration/suite/go.sum | $(Build.Repository.LocalPath)/src/qa-test-eks.sh'
              restoreKeys: '"go" | "$(Agent.OS)"'
              path: $(GO_CACHE_DIR)
            displayName: Restore Go build cache
          - bash: ./src/qa-test-eks.sh test-build eu-west-1 qa $(Build.ArtifactStagingDirectory)/test-master.bin
            env:
              GOCACHE: $(GO_CACHE_DIR)
            displayName: "Build test binary"
            timeoutInMinutes: 15
          - task: PublishBuildArtifacts@1.247.1
            inputs:
              pathToPublish: $(Build.ArtifactStagingDirectory)/test-master.bin
              artifactName: test-master

      - job: build_test_feature
        displayName: Build test binary from feature branch
        cancelTimeoutInMinutes: 0
        condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'master'))
        container: go-build
        variables:
          GO_CACHE_DIR: $(Pipeline.Workspace)/.cache/go-build/
        steps:
          - checkout: self
            fetchDepth: 1
            fetchTags: false
          - task: Cache@2.198.0
            inputs:
              key: '"go" | "$(Agent.OS)" | $(Build.Repository.LocalPath)/test/integration/suite/go.sum | $(Build.Repository.LocalPath)/src/qa-test-eks.sh'
              restoreKeys: '"go" | "$(Agent.OS)"'
              path: $(GO_CACHE_DIR)
            displayName: Restore Go build cache
          - bash: ./src/qa-test-eks.sh test-build eu-west-1 qa $(Build.ArtifactStagingDirectory)/test-feature.bin
            env:
              GOCACHE: $(GO_CACHE_DIR)
            displayName: "Build test binary"
            timeoutInMinutes: 15
          - task: PublishBuildArtifacts@1.247.1
            inputs:
              pathToPublish: $(Build.ArtifactStagingDirectory)/test-feature.bin
              artifactName: test-feature

      - deployment: init
        displayName: Provision from master branch
        cancelTimeoutInMinutes: 5
        container: prime
        dependsOn: build_test_master
        condition: succeeded()
        environment: QA
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: Origin
                  fetchDepth: 1
                  fetchTags: false
                  path: source
                - bash: ./src/qa-test-eks.sh apply-shared _global/eks-public-s3-bucket
                  workingDirectory: $(Agent.BuildDirectory)/source
                  displayName: "Provision shared EKS S3 bucket"
                  timeoutInMinutes: 15
                - bash: ./src/qa-test-eks.sh apply-cluster eu-west-1 qa
                  workingDirectory: $(Agent.BuildDirectory)/source
                  displayName: "Provision cluster & services"
                  timeoutInMinutes: 60
                - bash: ./src/qa-test-eks.sh apply-shared _global/s3-bucket-velero
                  workingDirectory: $(Agent.BuildDirectory)/source
                  displayName: "Provision Velero S3 bucket"
                  timeoutInMinutes: 15
                - bash: wait-for-ngs.sh qa
                  displayName: "Wait for managed node groups to become active"
                  timeoutInMinutes: 15
                - bash: wait-for-asgs.sh qa
                  displayName: "Wait for auto scaling groups's instances to be in service"
                  timeoutInMinutes: 15
                - download: current
                  displayName: "Download test binary"
                  artifact: test-master
                - bash: ./src/qa-test-eks.sh test-run eu-west-1 qa $(Pipeline.Workspace)/test-master/test-master.bin
                  workingDirectory: $(Agent.BuildDirectory)/source
                  displayName: "Run tests"
                  timeoutInMinutes: 15

      - deployment: apply
        displayName: Apply from feature branch
        cancelTimeoutInMinutes: 5
        container: prime
        dependsOn:
          - init
          - build_test_feature
        condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'master'))
        environment: QA
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  fetchDepth: 1
                  fetchTags: false
                  path: source
                - bash: ./src/qa-test-eks.sh apply-shared _global/eks-public-s3-bucket
                  workingDirectory: $(Agent.BuildDirectory)/source
                  displayName: "Provision shared EKS S3 bucket"
                  timeoutInMinutes: 15
                - bash: ./src/qa-test-eks.sh apply-cluster eu-west-1 qa
                  workingDirectory: $(Agent.BuildDirectory)/source
                  displayName: "Provision cluster & services"
                  timeoutInMinutes: 60
                - bash: ./src/qa-test-eks.sh apply-shared _global/s3-bucket-velero
                  workingDirectory: $(Agent.BuildDirectory)/source
                  displayName: "Provision Velero S3 bucket"
                  timeoutInMinutes: 15
                - bash: wait-for-ngs.sh qa
                  displayName: "Wait for managed node groups to become active"
                  timeoutInMinutes: 15
                - bash: wait-for-asgs.sh qa
                  displayName: "Wait for auto scaling groups's instances to be in service"
                - download: current
                  displayName: "Download test binary"
                  artifact: test-feature
                - bash: ./src/qa-test-eks.sh test-run eu-west-1 qa $(Pipeline.Workspace)/test-feature/test-feature.bin
                  workingDirectory: $(Agent.BuildDirectory)/source
                  displayName: "Run tests"
                  timeoutInMinutes: 15

      - deployment: destroy
        displayName: Destroy resources
        cancelTimeoutInMinutes: 5
        container: prime
        dependsOn: apply
        condition: and(succeededOrFailed(), eq(variables['TEST_DESTROY'], 'true'))
        environment: QA
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  fetchDepth: 1
                  fetchTags: false
                - bash: ./src/qa-test-eks.sh destroy-velero-bucket eu-west-1 _global/s3-bucket-velero
                  displayName: "Terraform destroy Velero S3 bucket"
                  condition: succeededOrFailed()
                  timeoutInMinutes: 30
                - bash: ./src/qa-test-eks.sh destroy-cluster eu-west-1 qa
                  displayName: "Terraform destroy cluster & services"
                  condition: succeededOrFailed()
                  timeoutInMinutes: 60
                - bash: ./src/qa-test-eks.sh destroy-public-bucket eu-west-1 _global/eks-public-s3-bucket
                  displayName: "Terraform destroy shared resources"
                  condition: succeededOrFailed()
                  timeoutInMinutes: 30
