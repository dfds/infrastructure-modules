apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: grafana-k8s-monitoring
  namespace: grafana
spec:
  serviceAccountName: helm-controller
  chart:
    spec:
      version: "${helm_chart_version}"
  values:
    cluster:
      name: ${cluster_name}
    alloy:
      alloy:
        clustering:
          enabled: true
        storagePath: /var/lib/agent
        mounts:
          extra:
            - mountPath: /var/lib/agent
              name: agent-wal
        resources:
          requests:
            memory: ${agent_resource_memory_request}
          limits:
            memory: ${agent_resource_memory_limit}
%{ if length(tolerations) > 0 || length(affinity) > 0 ~}
      controller:
%{ endif ~}
%{ if length(tolerations) > 0 ~}
        tolerations:
%{ for t in tolerations ~}
        - key: ${t.key}
          operator: ${t.operator}
%{ if t.value != null ~}
          value: ${t.value}
%{ endif ~}
          effect: ${t.effect}
%{ endfor ~}
%{ endif ~}
%{ if length(affinity) > 0 ~}
        affinity:
          nodeAffinity:
            preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              preference:
                matchExpressions:
%{ for a in affinity ~}
                - key: ${a.key}
                  operator: ${a.operator}
                  values:
%{ for v in a.values ~}
                  - ${ v }
%{ endfor ~}
%{ endfor ~}
%{ endif ~}
        replicas: 2
        volumeClaimTemplates:
          - metadata:
              name: agent-wal
            spec:
              accessModes: [ "ReadWriteOnce" ]
              storageClassName: csi-gp3
              resources:
                requests:
                  storage: ${storage_size}
    externalServices:
      prometheus:
        host: ${prometheus_url}
        basicAuth:
          username: "${prometheus_username}"
          password: ${api_token}
      loki:
        host: ${loki_url}
        basicAuth:
          username: ${loki_username}
          password: ${api_token}
      tempo:
        host: ${tempo_url}
        basicAuth:
          username: ${tempo_username}
          password: ${api_token}
    opencost:
      enabled: ${open_cost_enabled}
      opencost:
        exporter:
          defaultClusterId: ${cluster_name}
        prometheus:
          external:
            url: ${prometheus_url}/api/prom
    traces:
      enabled: ${traces_enabled}
    metrics:
      cost:
        enabled: ${open_cost_enabled}
%{ if length(tolerations) > 0 ~}
      tolerations:
%{ for t in tolerations ~}
      - key: ${t.key}
        operator: ${t.operator}
%{ if t.value != null ~}
        value: ${t.value}
%{ endif ~}
        effect: ${t.effect}
%{ endfor ~}
%{ endif ~}
%{ if length(affinity) > 0 ~}
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
%{ for a in affinity ~}
              - key: ${a.key}
                operator: ${a.operator}
                values:
%{ for v in a.values ~}
                - ${ v }
%{ endfor ~}
%{ endfor ~}
%{ endif ~}
