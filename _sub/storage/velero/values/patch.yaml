apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: velero
  namespace: flux-system
spec:
  serviceAccountName: helm-controller
  chart:
    spec:
      chart: velero
      version: ${helm_chart_version}
      sourceRef:
        kind: HelmRepository
        name: ${helm_repo_name}
        namespace: flux-system
  values:
    image:
      repository: velero/velero
      tag: ${image_tag}
    snapshotsEnabled: ${snapshots_enabled}
    deployNodeAgent: ${node_agent_enabled}
    initContainers:
      - name: velero-plugin-for-aws
        image: velero/velero-plugin-for-aws:${plugin_for_aws_version}
        volumeMounts:
          - mountPath: /target
            name: plugins
%{ if enable_azure_storage ~}
      - name: velero-plugin-for-microsoft-azure
        image: velero/velero-plugin-for-microsoft-azure:${plugin_for_azure_version}
        volumeMounts:
          - mountPath: /target
            name: plugins
%{ endif ~}
    configuration:
      features: EnableCSI
      logLevel: ${log_level}
      backupStorageLocation:
        - name: aws
          provider: aws
          default : true
          bucket: ${bucket_name}
          config:
            region: ${bucket_region}
%{ if read_only ~}
          accessMode: ReadOnly
%{ endif ~}
%{ if enable_azure_storage ~}
        - name: azure
          provider: azure
          bucket: ${azure_bucket_name}
          credential:
            name: ${azure_credentials_secret_name}
            key: ${azure_credentials_secret_key}
          config:
            resourceGroup: ${azure_resource_group_name}
            storageAccount: ${azure_storage_account_name}
            subscriptionId: ${azure_subscription_id}
%{ if read_only ~}
          accessMode: ReadOnly
%{ endif ~}
%{ endif ~}
      volumeSnapshotLocation:
        - name: velero-snapshot
          provider: aws
          config:
            region: ${bucket_region}
%{ if enable_azure_storage ~}
        - name: azure-snapshot
          provider: azure
          bucket: ${azure_bucket_name}
          credential:
            name: ${azure_credentials_secret_name}
            key: ${azure_credentials_secret_key}
          config:
            resourceGroup: ${azure_resource_group_name}
            subscriptionId: ${azure_subscription_id}
%{ endif ~}
    serviceAccount:
      server:
        create: true
        annotations:
          eks.amazonaws.com/role-arn: "${velero_role_arn}"
          eks.amazonaws.com/sts-regional-endpoints: "true"
%{ if !read_only ~}
    schedules:
      ${cluster_name}-cluster-backup:
        schedule: "${cron_schedule}"
        template:
          ttl: "${schedules_template_ttl}"
          snapshotVolumes: ${snapshots_enabled}
%{ if length(excluded_namespace_scoped_resources) > 0 ~}
          excludedNamespaceScopedResources:
%{ for ex_ns in excluded_namespace_scoped_resources ~}
            - ${ex_ns}
%{ endfor ~}
%{ endif ~}
%{ if length(excluded_cluster_scoped_resources) > 0 ~}
          excludedClusterScopedResources:
%{ for ex_cl in excluded_cluster_scoped_resources ~}
            - ${ex_cl}
%{ endfor ~}
%{ endif ~}
          excludedNamespaces:
            - velero
%{ if enable_azure_storage ~}
      ${cluster_name}-cluster-backup-offsite:
        disabled: false
        schedule: "${ cron_schedule_offsite ~}"
        template:
          storageLocation: "azure"
          ttl: "${ cron_schedule_offsite_ttl ~}"
          snapshotVolumes: ${snapshots_enabled}
          volumeSnapshotLocations:
            - "azure-snapshot"
          snapshotMoveData: true
          excludedNamespaces: 
            - velero
%{ if length(excluded_namespace_scoped_resources) > 0 ~}
          excludedNamespaceScopedResources:
%{ for ex_ns in excluded_namespace_scoped_resources ~}
            - ${ex_ns}
%{ endfor ~}
%{ endif ~}
%{ if length(excluded_cluster_scoped_resources) > 0 ~}
          excludedClusterScopedResources:
%{ for ex_cl in excluded_cluster_scoped_resources ~}
            - ${ex_cl}
%{ endfor ~}
%{ endif ~}
%{ endif ~}
%{ endif ~}
