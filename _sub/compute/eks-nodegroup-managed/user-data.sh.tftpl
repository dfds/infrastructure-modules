MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="BOUNDARY"

--BOUNDARY
Content-Type: text/x-shellscript; charset="us-ascii"

#!/bin/sh
set -o xtrace

echo fs.inotify.max_user_watches=${worker_inotify_max_user_watches} | sudo tee -a /etc/sysctl.conf
sudo sysctl -p

DOCKER_HUB_CREDS=$(aws ssm get-parameter --name ${docker_hub_creds} --with-decrypt --query 'Parameter.Value' --output text)
DOCKER_HUB_USER=$(echo "$${DOCKER_HUB_CREDS}" | jq -r .username)
DOCKER_HUB_PASSWD=$(echo "$${DOCKER_HUB_CREDS}" | jq -r .password)

cat << EOF >> /etc/containerd/config.toml
%{ if ami_using_containerd_v2 }
  [plugins."io.containerd.cri.v1.images".registry.configs]
    [plugins."io.containerd.cri.v1.images".registry.configs."registry-1.docker.io".auth]
%{ else }
  [plugins."io.containerd.grpc.v1.cri".registry.configs]
    [plugins."io.containerd.grpc.v1.cri".registry.configs."registry-1.docker.io".auth]
%{ endif ~}
      username = "$${DOCKER_HUB_USER}"
      password = "$${DOCKER_HUB_PASSWD}"
EOF

service containerd restart

--BOUNDARY
Content-Type: application/node.eks.aws

---
apiVersion: node.eks.aws/v1alpha1
kind: NodeConfig
spec:
    cluster:
        name: ${cluster_name}
        apiServerEndpoint: ${eks_endpoint}
        certificateAuthority: ${eks_certificate_authority}
        cidr: ${cidr}
    kubelet:
        config:
%{ if vpc_cni_prefix_delegation_enabled }
            maxPods: ${max_pods}
%{ endif ~}
            registryPullQPS: 0
%{ if kube_cpu != null || kube_memory != null }
            kubeReserved:
%{ endif ~}
%{ if kube_cpu != null }
                cpu: ${kube_cpu}
%{ endif ~}
%{ if kube_memory != null }
                memory: ${kube_memory}
%{ endif ~}
%{ if sys_cpu != null || sys_memory != null }
            systemReserved:
%{ endif ~}
%{ if sys_cpu != null }
                cpu: ${sys_cpu}
%{ endif ~}
%{ if sys_memory != null }
                memory: ${sys_memory}
%{ endif ~}

--BOUNDARY--
