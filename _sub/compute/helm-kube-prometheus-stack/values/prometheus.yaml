prometheus:
  additionalServiceMonitors:
    - name: "monitoring-metrics"
      additionalLabels:
        release: monitoring
      selector:
        matchLabels:
          scrape-service-metrics: "true"
      namespaceSelector:
        any: true
      endpoints:
        - path: /metrics
          port: metrics
          scrapeTimeout: 30s
        - path: /metrics
          port: admin
        - path: /metrics
          port: http
  prometheusSpec:
%{ if prometheus_confluent_metrics_scrape_enabled ~}
    queryLogFile: "/dev/stdout"
    additionalScrapeConfigs:
      - job_name: confluent-cloud
        scrape_interval: ${prometheus_confluent_metrics_scrape_interval}
        scrape_timeout:  ${prometheus_confluent_metrics_scrape_timeout}
        honor_timestamps: true
        static_configs:
          - targets:
            - api.telemetry.confluent.cloud
        scheme: https
        basic_auth:
          username: ${prometheus_confluent_metrics_api_key}
          password: ${prometheus_confluent_metrics_api_secret}
        metrics_path: /v2/metrics/cloud/export
        params:
          "resource.kafka.id":
%{ for f in prometheus_confluent_metrics_resource_kafka_id_list ~}
            - ${f}
%{ endfor ~}
%{ endif ~}

    enableAdminAPI: false
%{ if query_log_file_enabled ~}
    queryLogFile: "/dev/stdout"
%{ endif ~}
%{ if length(enable_features) > 0 ~}
    enableFeatures:
%{ for f in enable_features ~}
    - ${f}
%{ endfor ~}
%{ endif ~}
    resources:
      requests:
        memory: ${prometheus_request_memory}
        cpu: ${prometheus_request_cpu}
      limits:
        memory: ${prometheus_limit_memory}
        cpu: ${prometheus_limit_cpu}
    priorityClassName: ${prometheus_priorityclass}
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: ${prometheus_storageclass}
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: ${prometheus_storage_size}
    retention: ${prometheus_retention}
%{ if length(tolerations) > 0 ~}
    tolerations:
%{ for t in tolerations ~}
    - key: ${t.key}
      operator: ${t.operator}
%{ if t.value != null ~}
      value: ${t.value}
%{ endif ~}
      effect: ${t.effect}
%{ endfor ~}
%{ endif ~}
%{ if length(affinity) > 0 ~}
    affinity:
      nodeAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 1
          preference:
            matchExpressions:
%{ for a in affinity ~}
            - key: ${a.key}
              operator: ${a.operator}
              values:
%{ for v in a.values ~}
              - ${ v }
%{ endfor ~}
%{ endfor ~}
%{ endif ~}
grafana:
  serviceMonitor:
    enabled: true
    labels:
      release: monitoring
kubelet:
  serviceMonitor:
    cAdvisorMetricRelabelings:
      - regex: id
        action: labeldrop
      - regex: name
        action: labeldrop