module "iam_policies" {
  source                            = "../../_sub/security/iam-policies"
  iam_role_trusted_account_root_arn = ["arn:aws:iam::${var.core_account_id}:root"] # Account ID from variable instead of data.aws_caller_identity - seems to get rate-throttled
}

module "iam_policies_shared" {
  source        = "../../_sub/security/iam-policies"
  replace_token = var.capability_root_id
}


# --------------------------------------------------
# Create account
# --------------------------------------------------

module "org_account" {
  source        = "../../_sub/security/org-account"
  name          = var.name
  org_role_name = var.org_role_name
  email         = var.email
  parent_id     = var.parent_id
  sleep_after   = 120
}

module "iam_account_alias" {
  source        = "../../_sub/security/iam-account-alias"
  account_alias = module.org_account.name

  providers = {
    aws = aws.workload
  }
}

# --------------------------------------------------
# AWS Account - Alternate contacts
# --------------------------------------------------

module "alternate_contact_billing" {
  source = "../../_sub/security/alternate-contact"

  contact_type = "BILLING"
  email        = var.email_billing
  phone_number = var.primary_phone_number

  providers = {
    aws = aws.workload
  }
}

module "alternate_contact_operations" {
  source = "../../_sub/security/alternate-contact"

  contact_type = "OPERATIONS"
  email        = var.email_operations
  phone_number = var.primary_phone_number

  providers = {
    aws = aws.workload
  }
}

module "alternate_contact_security" {
  source = "../../_sub/security/alternate-contact"

  contact_type = "SECURITY"
  email        = var.email_security
  phone_number = var.primary_phone_number

  providers = {
    aws = aws.workload
  }
}

# --------------------------------------------------
# IAM roles - Shared
# --------------------------------------------------

module "iam_role_shared" {
  source               = "../../_sub/security/iam-role"
  role_name            = var.capability_root_id
  role_path            = var.shared_role_path
  role_description     = "Namespaced access to resources in shared account, e.g. Parameter Store, CloudWatch Logs etc."
  max_session_duration = 28800 # 8 hours
  assume_role_policy   = data.aws_iam_policy_document.shared_role_cap_acc.json
  role_policy_name     = "NamespacedAccessInSharedAccount"
  role_policy_document = module.iam_policies_shared.capability_access_shared

  providers = {
    aws = aws.shared
  }
}

# --------------------------------------------------
# IAM roles - Workload (capability context)
# --------------------------------------------------

module "iam_role_sso_reader" {
  source               = "../../_sub/security/iam-role"
  role_name            = "sso-reader"
  role_description     = "Reads autogenerated roles created for SSO access"
  max_session_duration = 28800 # 8 hours
  assume_role_policy   = data.aws_iam_policy_document.assume_role_policy_selfservice.json
  role_policy_name     = "IamRead"
  role_policy_document = module.iam_policies.ssoreader

  providers = {
    aws = aws.workload
  }
}

module "iam_role_vpc_reader" {
  source               = "../../_sub/security/iam-role"
  role_name            = "vpc-reader"
  role_description     = "Reads VPC and VPC tags"
  max_session_duration = 28800 # 8 hours
  assume_role_policy   = data.aws_iam_policy_document.assume_role_policy_selfservice_api.json
  role_policy_name     = "VpcRead"
  role_policy_document = module.iam_policies.vpcreader

  providers = {
    aws = aws.workload
  }
}

module "iam_role_ecr_push" {
  source               = "../../_sub/security/iam-role"
  role_name            = "ecr-push"
  role_description     = ""
  max_session_duration = 3600
  assume_role_policy   = data.aws_iam_policy_document.assume_role_policy_self.json
  role_policy_name     = "PushToECR"
  role_policy_document = module.iam_policies.push_to_ecr

  providers = {
    aws = aws.workload
  }
}

module "iam_role_certero" {
  source               = "../../_sub/security/iam-role"
  role_name            = "CerteroRole"
  role_description     = ""
  max_session_duration = 3600
  assume_role_policy   = data.aws_iam_policy_document.assume_role_policy_master_account.json
  role_policy_name     = "CerteroEndpoint"
  role_policy_document = module.iam_policies.certero_endpoint

  providers = {
    aws = aws.workload
  }
}

# --------------------------------------------------
# IAM deployment user
# --------------------------------------------------

resource "aws_iam_group" "admin" {
  name     = "Admins"
  provider = aws.workload
}

resource "aws_iam_group_policy" "admin" {
  name     = "Admin"
  group    = aws_iam_group.admin.name
  policy   = module.iam_policies.admin
  provider = aws.workload
}

module "iam_user_deploy" {
  source            = "../../_sub/security/iam-user"
  user_name         = "Deploy"
  group_memberships = [aws_iam_group.admin.name]

  providers = {
    aws = aws.workload
  }
}

# --------------------------------------------------
# IAM OpenID Connect Provider
# --------------------------------------------------

module "aws_iam_oidc_provider" {
  source                          = "../../_sub/security/iam-oidc-provider"
  eks_openid_connect_provider_url = var.oidc_provider_url
  eks_cluster_name                = var.oidc_provider_tag

  providers = {
    aws = aws.workload
  }
}

module "aws_iam_oidc_provider_ssm" { # Add SSM parameter for OIDC provider URL TODO: Test!
  source = "../../_sub/security/ssm-parameter-store"
  providers = {
    aws = aws.workload
  }
  key_name        = "/managed/cluster/oidc-provider"
  key_description = "OIDC Provider URL for EKS cluster"
  key_value       = var.oidc_provider_url
  tag_createdby   = var.ssm_param_createdby
}

module "aws_iam_oidc_provider_ssm_eu_west_1" { # Add SSM parameter for OIDC provider in eu-west-1
  source = "../../_sub/security/ssm-parameter-store"
  providers = {
    aws = aws.workload_2
  }
  key_name        = "/managed/cluster/oidc-provider"
  key_description = "OIDC Provider URL for EKS cluster"
  key_value       = var.oidc_provider_url
  tag_createdby   = var.ssm_param_createdby
}

# --------------------------------------------------
# aws_context_account_created event
# --------------------------------------------------

locals {
  # account_created_payload = <<EOF
  # {"contextId":"${var.context_id}","accountId":"${module.org_account.id}","roleArn":"${module.iam_role_capability.arn}","roleEmail":"${module.org_account.email}","capabilityRootId":"${var.capability_root_id}","capabilityName":"${var.capability_name}","contextName":"${var.context_name}","capabilityId":"${var.capability_id}"}EOF
  account_created_payload_map = {
    "contextId"        = var.context_id
    "accountId"        = module.org_account.id
    "roleEmail"        = module.org_account.email
    "capabilityRootId" = var.capability_root_id
    "capabilityName"   = var.capability_name
    "contextName"      = var.context_name
    "capabilityId"     = var.capability_id
  }

  account_created_payload_json = jsonencode(local.account_created_payload_map)
}

module "kafka_produce_account_created" {
  source          = "../../_sub/misc/kafka-message"
  publish         = var.publish_message
  event_name      = "aws_context_account_created"
  message_version = "1"
  correlation_id  = var.correlation_id
  sender          = "org-account-context created by terraform"
  payload         = local.account_created_payload_json
  key             = var.capability_id
  broker          = var.kafka_broker
  topic           = "build.selfservice.events.capabilities"
  username        = var.kafka_username
  password        = var.kafka_password
}

# --------------------------------------------------
# AWS Resource Explorer Feature
# --------------------------------------------------

module "aws_resource_explorer-metrics" {
  source = "../../_sub/monitoring/aws-resource-explorer-metrics"

  allowed_assume_arn = "arn:aws:iam::${var.master_account_id}:role/aws-resource-exporter"

  providers = {
    aws = aws.workload
  }
}

resource "aws_resourceexplorer2_index" "aggregator" {
  type = "AGGREGATOR"

  provider = aws.workload
}

resource "aws_resourceexplorer2_view" "aggregator_view" {
  name         = "all-resources"
  default_view = true

  included_property {
    name = "tags"
  }

  depends_on = [aws_resourceexplorer2_index.aggregator]
  provider   = aws.workload
}


resource "aws_resourceexplorer2_index" "us-east-1" {
  type = "LOCAL"

  provider = aws.workload_us-east-1
}

resource "aws_resourceexplorer2_index" "us-east-2" {
  type = "LOCAL"

  provider = aws.workload_us-east-2
}
resource "aws_resourceexplorer2_index" "us-west-1" {
  type = "LOCAL"

  provider = aws.workload_us-west-1
}

resource "aws_resourceexplorer2_index" "us-west-2" {
  type = "LOCAL"

  provider = aws.workload_us-west-2
}


resource "aws_resourceexplorer2_index" "eu-west-1" {
  type = "LOCAL"

  provider = aws.workload_eu-west-1
}

# --------------------------------------------------
# Account hardening
# --------------------------------------------------
module "hardened-account" {
  count = var.harden ? 1 : 0
  providers = {
    aws.workload   = aws.workload
    aws.workload_2 = aws.workload_2
    aws.sso        = aws.sso
  }
  source = "../../_sub/security/hardened-account"

  harden                          = var.harden
  account_id                      = module.org_account.id
  account_name                    = var.name
  security_bot_lambda_version     = var.security_bot_lambda_version
  security_bot_lambda_s3_bucket   = var.security_bot_lambda_s3_bucket
  monitoring_email                = var.hardened_monitoring_email
  monitoring_slack_channel        = var.hardened_monitoring_slack_channel
  monitoring_slack_token          = var.hardened_monitoring_slack_token
  security_contact_name           = var.hardened_security_contact_name
  security_contact_title          = var.hardened_security_contact_title
  security_contact_email          = var.hardened_security_contact_email
  security_contact_phone_number   = var.hardened_security_contact_phone_number
  sso_support_permission_set_name = var.sso_support_permission_set_name
  sso_support_group_name          = var.sso_support_group_name
}

# --------------------------------------------------
# Github OIDC provider
# --------------------------------------------------

module "github_oidc_provider" {
  count = length(var.repositories) > 0 && length(var.oidc_role_access) > 0 ? 1 : 0
  providers = {
    aws = aws.workload
  }
  source = "../../_sub/security/iam-github-oidc-provider"

  repositories     = var.repositories
  oidc_role_access = var.oidc_role_access
}

# --------------------------------------------------
# AWS Backup
# --------------------------------------------------

locals {
  deploy_kms_key = false
  kms_key_admins = [module.org_account.org_role_arn]
}

resource "aws_iam_role" "backup" {
  provider = aws.workload
  count    = var.deploy_backup ? 1 : 0

  name               = "backup-role"
  assume_role_policy = data.aws_iam_policy_document.backup_trust.json
  managed_policy_arns = [
    "arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup",
    "arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForRestores"
  ]
}

data "aws_iam_policy_document" "backup_trust" {
  statement {
    actions = ["sts:AssumeRole"]
    principals {
      type        = "Service"
      identifiers = ["backup.amazonaws.com"]
    }
  }
}

module "backup_eu_central_1" {
  providers = {
    aws = aws.workload
  }
  count  = var.deploy_backup ? 1 : 0
  source = "../../_sub/security/aws-backup"

  settings_resource_type_opt_in_preference = var.aws_backup_settings_resource_type_opt_in_preference
  resource_type_management_preference      = var.aws_backup_resource_type_management_preference

  new_vault_name = var.aws_backup_vault_name_new
  kms_key_admins = local.kms_key_admins
  backup_plans   = var.aws_backup_plans
  iam_role_arn   = aws_iam_role.backup[0].arn
  tags           = var.aws_backup_tags
}

module "backup_eu_west_1" {
  providers = {
    aws = aws.workload_2
  }
  count  = var.deploy_backup ? 1 : 0
  source = "../../_sub/security/aws-backup"

  settings_resource_type_opt_in_preference = var.aws_backup_settings_resource_type_opt_in_preference
  resource_type_management_preference      = var.aws_backup_resource_type_management_preference

  new_vault_name = var.aws_backup_vault_name_new
  kms_key_admins = local.kms_key_admins
  backup_plans   = var.aws_backup_plans
  iam_role_arn   = aws_iam_role.backup[0].arn
  tags           = var.aws_backup_tags
}

# --------------------------------------------------
# IAM role for Grafana Cloud Cloudwatch integration
# --------------------------------------------------

module "grafana_cloud_cloudwatch_integration" {
  count    = var.grafana_cloud_cloudwatch_integration_iam_role != null ? 1 : 0
  source   = "../../_sub/security/grafana-cloud-cloudwatch-integration"
  iam_role = var.grafana_cloud_cloudwatch_integration_iam_role

  providers = {
    aws = aws.workload
  }
}

# --------------------------------------------------
# VPC Peering
# --------------------------------------------------

module "vpc_peering_capability_eu_west_1" {
  for_each = { for k, v in var.vpc_peering_settings_eu_west_1 : k => v if var.deploy_vpc_peering_eu_west_1 }

  source = "../../_sub/network/vpc-peering-requester"

  cidr_block_vpc      = each.value.assigned_cidr_block_vpc
  cidr_block_subnet_a = each.value.assigned_cidr_block_subnet_a
  cidr_block_subnet_b = each.value.assigned_cidr_block_subnet_b
  cidr_block_subnet_c = each.value.assigned_cidr_block_subnet_c

  cidr_block_peer              = each.value.cidr_block_peer
  peer_owner_id                = var.shared_account_id
  peer_vpc_id                  = each.value.peer_vpc_id
  peer_region                  = each.value.peer_region
  map_public_ip_on_launch      = var.vpc_peering_map_public_ip_on_launch
  deploy_vpc_peering_endpoints = var.deploy_vpc_peering_endpoints

  tags = local.all_tags

  providers = {
    aws = aws.workload_eu-west-1
  }
}

module "vpc_peering_oxygen_eu_west_1" {
  for_each = { for k, v in var.vpc_peering_settings_eu_west_1 : k => v if var.deploy_vpc_peering_eu_west_1 }

  source = "../../_sub/network/vpc-peering-accepter"

  capability_id          = var.capability_root_id
  destination_cidr_block = each.value.assigned_cidr_block_vpc
  vpc_id                 = each.value.peer_vpc_id
  peering_connection_id  = module.vpc_peering_capability_eu_west_1[each.key].vpc_peering_connection_id
  route_table_id         = each.value.peer_route_table_id

  tags = local.all_tags

  providers = {
    aws = aws.shared_vpc
  }
}

module "vpc_peering_capability_eu_central_1" {
  for_each = { for k, v in var.vpc_peering_settings_eu_central_1 : k => v if var.deploy_vpc_peering_eu_central_1 }

  source = "../../_sub/network/vpc-peering-requester"

  cidr_block_vpc      = each.value.assigned_cidr_block_vpc
  cidr_block_subnet_a = each.value.assigned_cidr_block_subnet_a
  cidr_block_subnet_b = each.value.assigned_cidr_block_subnet_b
  cidr_block_subnet_c = each.value.assigned_cidr_block_subnet_c

  cidr_block_peer         = each.value.cidr_block_peer
  peer_owner_id           = var.shared_account_id
  peer_vpc_id             = each.value.peer_vpc_id
  peer_region             = each.value.peer_region
  map_public_ip_on_launch = var.vpc_peering_map_public_ip_on_launch
  deploy_vpc_peering_endpoints = var.deploy_vpc_peering_endpoints
  
  tags = local.all_tags

  providers = {
    aws = aws.workload_eu-central-1
  }
}



module "vpc_peering_oxygen_eu_central_1" {
  for_each = { for k, v in var.vpc_peering_settings_eu_central_1 : k => v if var.deploy_vpc_peering_eu_central_1 }

  source = "../../_sub/network/vpc-peering-accepter"

  capability_id          = var.capability_id
  destination_cidr_block = each.value.assigned_cidr_block_vpc
  vpc_id                 = each.value.peer_vpc_id
  peering_connection_id  = module.vpc_peering_capability_eu_central_1[each.key].vpc_peering_connection_id
  route_table_id         = each.value.peer_route_table_id

  tags = local.all_tags

  providers = {
    aws = aws.shared_vpc
  }
}

# --------------------------------------------------
# Steampipe
# --------------------------------------------------

module "steampipe-audit" {
  source = "../../_sub/security/steampipe-audit"

  allowed_account_id        = var.security_account_id
  allowed_principal_role_name = var.steampipe_audit_role_name

  providers = {
    aws = aws.workload
  }
}
