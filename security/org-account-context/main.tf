# --------------------------------------------------
# Init
# --------------------------------------------------

provider "aws" {
  region = var.aws_region

  # Assume role in Master account
  assume_role {
    role_arn = "arn:aws:iam::${var.master_account_id}:role/${var.prime_role_name}"
  }
}

provider "aws" {
  region = var.aws_region
  alias  = "core" # this provider does not seem to be used?
}

provider "aws" {
  region = var.aws_region
  alias  = "shared"

  # Assume role in Shared account
  assume_role {
    role_arn = "arn:aws:iam::${var.shared_account_id}:role/${var.prime_role_name}"
  }
}

provider "aws" {
  region = var.aws_region
  alias  = "workload"

  # Need explicit credentials in Master, to be able to assume Organizational Role in Workload account
  access_key = var.access_key_master
  secret_key = var.secret_key_master

  # Assume the Organizational role in Workload account
  assume_role {
    role_arn = module.org_account.org_role_arn
  }
}

terraform {
  # The configuration for this backend will be filled in by Terragrunt
  backend "s3" {
  }
}

module "iam_policies" {
  source                            = "../../_sub/security/iam-policies"
  iam_role_trusted_account_root_arn = ["arn:aws:iam::${var.core_account_id}:root"] # Account ID from variable instead of data.aws_caller_identity - seems to get rate-throttled
}

module "iam_policies_shared" {
  source        = "../../_sub/security/iam-policies"
  replace_token = var.capability_root_id
}


# --------------------------------------------------
# Create account
# --------------------------------------------------

module "org_account" {
  source        = "../../_sub/security/org-account"
  name          = var.name
  org_role_name = var.org_role_name
  email         = var.email
  parent_id     = var.parent_id
  sleep_after   = 120
}

module "iam_account_alias" {
  source        = "../../_sub/security/iam-account-alias"
  account_alias = module.org_account.name

  providers = {
    aws = aws.workload
  }
}

# --------------------------------------------------
# IAM roles - Shared
# --------------------------------------------------

module "iam_role_shared" {
  source               = "../../_sub/security/iam-role"
  role_name            = var.capability_root_id
  role_path            = var.shared_role_path
  role_description     = "Namespaced access to resources in shared account, e.g. Parameter Store, CloudWatch Logs etc."
  max_session_duration = 28800 # 8 hours
  assume_role_policy   = data.aws_iam_policy_document.shared_role_cap_acc.json
  role_policy_name     = "NamespacedAccessInSharedAccount"
  role_policy_document = module.iam_policies_shared.capability_access_shared

  providers = {
    aws = aws.shared
  }
}

# --------------------------------------------------
# IAM roles - Workload (capability context)
# --------------------------------------------------

module "iam_role_sso_reader" {
  source               = "../../_sub/security/iam-role"
  role_name            = "sso-reader"
  role_description     = "Reads autogenerated roles created for SSO access"
  max_session_duration = 28800 # 8 hours
  assume_role_policy   = data.aws_iam_policy_document.assume_role_policy_selfservice.json
  role_policy_name     = "IamRead"
  role_policy_document = module.iam_policies.ssoreader

  providers = {
    aws = aws.workload
  }
}

module "iam_role_ecr_push" {
  source               = "../../_sub/security/iam-role"
  role_name            = "ecr-push"
  role_description     = ""
  max_session_duration = 3600
  assume_role_policy   = data.aws_iam_policy_document.assume_role_policy_self.json
  role_policy_name     = "PushToECR"
  role_policy_document = module.iam_policies.push_to_ecr

  providers = {
    aws = aws.workload
  }
}

# --------------------------------------------------
# IAM deployment user
# --------------------------------------------------

module "iam_user_deploy" {
  source                    = "../../_sub/security/iam-user"
  user_name                 = "Deploy"
  user_policy_name          = "Admin"
  user_policy_document      = module.iam_policies.admin
  create_aws_iam_access_key = var.create_aws_iam_access_key
  providers = {
    aws = aws.workload
  }
}

# --------------------------------------------------
# IAM OpenID Connect Provider
# --------------------------------------------------

module "aws_iam_oidc_provider" {
  source                          = "../../_sub/security/iam-oidc-provider"
  eks_openid_connect_provider_url = var.oidc_provider_url
  eks_cluster_name                = var.oidc_provider_tag

  providers = {
    aws = aws.workload
  }
}

# --------------------------------------------------
# Account hardening
# --------------------------------------------------

module "cloudtrail_s3_local" {
  source           = "../../_sub/storage/s3-cloudtrail-bucket"
  create_s3_bucket = var.harden
  s3_bucket        = "cloudtrail-local-${var.capability_root_id}"

  providers = {
    aws = aws.workload
  }
}

module "cloudtrail_local" {
  source           = "../../_sub/security/cloudtrail-config"
  s3_bucket        = module.cloudtrail_s3_local.bucket_name
  deploy           = var.harden
  trail_name       = "cloudtrail-local-${var.capability_root_id}"
  create_log_group = var.harden

  providers = {
    aws = aws.workload
  }
}

# [CloudWatch.1] A log metric filter and alarm should exist for usage of the
# "root" user
# https://docs.aws.amazon.com/securityhub/latest/userguide/cloudwatch-controls.html#cloudwatch-1

resource "aws_cloudwatch_log_metric_filter" "root_usage" {
  count          = var.harden ? 1 : 0
  name           = "RootUsage"
  pattern        = "{$.userIdentity.type=\"Root\" && $.userIdentity.invokedBy NOT EXISTS && $.eventType !=\"AwsServiceEvent\"}"
  log_group_name = module.cloudtrail_local.cloud_watch_logs_group_name

  metric_transformation {
    name      = "RootUsageCount"
    namespace = "LogMetrics"
    value     = "1"
  }

  provider = aws.workload
}

resource "aws_sns_topic" "root_usage" {
  count = var.harden ? 1 : 0
  name  = "harden-root-usage"

  provider = aws.workload
}

resource "aws_sns_topic_subscription" "root_usage" {
  count     = var.harden ? 1 : 0
  topic_arn = aws_sns_topic.root_usage[count.index].arn
  protocol  = "email"
  endpoint  = var.hardened_monitoring_email

  provider = aws.workload
}

resource "aws_cloudwatch_metric_alarm" "root_usage" {
  count                     = var.harden ? 1 : 0
  alarm_name                = "harden-root-usage"
  comparison_operator       = "GreaterThanOrEqualToThreshold"
  evaluation_periods        = 1
  metric_name               = "RootUsageCount"
  namespace                 = "LogMetrics"
  period                    = 300
  statistic                 = "Sum"
  threshold                 = 1
  alarm_description         = "This alarm monitors root usage events."
  insufficient_data_actions = []
  alarm_actions             = [aws_sns_topic.root_usage[count.index].arn]

  depends_on = [aws_cloudwatch_log_metric_filter.root_usage]

  provider = aws.workload
}

# --------------------------------------------------
# aws_context_account_created event
# --------------------------------------------------

locals {
  # account_created_payload = <<EOF
  # {"contextId":"${var.context_id}","accountId":"${module.org_account.id}","roleArn":"${module.iam_role_capability.arn}","roleEmail":"${module.org_account.email}","capabilityRootId":"${var.capability_root_id}","capabilityName":"${var.capability_name}","contextName":"${var.context_name}","capabilityId":"${var.capability_id}"}EOF
  account_created_payload_map = {
    "contextId"        = var.context_id
    "accountId"        = module.org_account.id
    "roleEmail"        = module.org_account.email
    "capabilityRootId" = var.capability_root_id
    "capabilityName"   = var.capability_name
    "contextName"      = var.context_name
    "capabilityId"     = var.capability_id
  }

  account_created_payload_json = jsonencode(local.account_created_payload_map)
}

module "kafka_produce_account_created" {
  source          = "../../_sub/misc/kafka-message"
  publish         = var.publish_message
  event_name      = "aws_context_account_created"
  message_version = "1"
  correlation_id  = var.correlation_id
  sender          = "org-account-context created by terraform"
  payload         = local.account_created_payload_json
  key             = var.capability_id
  broker          = var.kafka_broker
  topic           = "build.selfservice.events.capabilities"
  username        = var.kafka_username
  password        = var.kafka_password
}
